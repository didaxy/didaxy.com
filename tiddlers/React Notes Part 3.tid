created: 20171022233257941
modified: 20171208034311042
next: [[React Notes Part 4]]
part: 3
partof: React Notes
previous: [[React Notes Part 2]]
subtitle: Events
tags: TutorialPart Live noindex
title: React Notes Part 3
type: text/vnd.tiddlywiki

<<tutorial_header>>

<$macrocall $name="tutorial_parts" name={{!!partof}}/>

*React events are named using camelCase, rather than lowercase.
*With JSX you pass a function as the event handler, rather than a string.
For example, the HTML:

```
<button onclick="activateLasers()">
  Activate Lasers
</button>
```
is slightly different in React:

```
<button onClick={activateLasers}>
  Activate Lasers
</button>
```
!!Prevent Default

Did you know that you can prevent the default click behaviour in a regular javascript event by returning ``false`` from your handler?

You can't do that in React. You need to call ``preventDefault`` explicitly.

!!Synthetic Events

React is wrapping the browser events in its own wrapper so that they are identical, regardless of which browser you are using.

You won't generally need to ``addEventListener`` because you will add the handler when you create the component.

It is common for the handler functions to be methods on the class that defines the component.

It is common for the handler methods to follow a standard naming pattern. ie; ``this.handleClick`` etc.

!!Binding

By default, in Javascript, class methods are not bound.

This means that they don't have their ``this`` value set to the instance that you are working with, unless you explicitly bind it.

The commonest way to do this is to bind it by default in the constructor.

```
    this.handleClick = this.handleClick.bind(this);
```

"Generally, if you refer to a method without () after it, such as onClick={this.handleClick}, you should bind that method."

NB: I would like to learn more about this. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind

!!Binding

This example from the MDN link above shows pretty well what's going on.

```
this.x = 9;    // this refers to global "window" object here in the browser
var module = {
  x: 81,
  getX: function() { return this.x; }
};

module.getX(); // 81

var retrieveX = module.getX;
retrieveX();   
// returns 9 - The function gets invoked at the global scope

// Create a new function with 'this' bound to module
// New programmers might confuse the
// global var x with module's property x
var boundGetX = retrieveX.bind(module);
boundGetX(); // 81
```

!!Other Ways

We could also use the "public class fields" syntax, which looks like this

```
class LoggingButton extends React.Component {
  // This syntax ensures `this` is bound within handleClick.
  // Warning: this is *experimental* syntax.
  handleClick = () => {
    console.log('this is:', this);
  }
...
```

This is experimental, and you can read more about it here: https://babeljs.io/docs/plugins/transform-class-properties/

It seems to only be available in Babel. It is included in create-react-app.

The other way to solve this is using arrow functions in the callback,

```
      <button onClick={(e) => this.handleClick(e)}>
```

"The problem with this syntax is that a different callback is created each time the LoggingButton renders. In most cases, this is fine. However, if this callback is passed as a prop to lower components, those components might do an extra re-rendering. We generally recommend binding in the constructor or using the class fields syntax, to avoid this sort of performance problem."

!!Passing Additional Parameters

```
<button onClick={(e) => this.deleteRow(id, e)}>Delete Row</button>
<button onClick={this.deleteRow.bind(this, id)}>Delete Row</button>
```

The above two lines are equivalent, and use arrow functions and Function.prototype.bind respectively.


<<tutorial_nav>>